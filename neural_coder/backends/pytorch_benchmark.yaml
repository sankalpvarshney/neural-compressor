# Copyright (c) 2022 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

transformation:
  location:
    - insert_above_inference_line
    - insert_below_inference_line
    - indent_inference_line
  content:
    - |-
      [+] if not ACCURACY_MODE:
      [+]     try:
      [+]         time
      [+]         time_nc = time.time
      [+]     except:
      [+]         from time import time as time_nc
      [+]     count_iter_ = 0
      [+]     total_time_ = 0
      [+]     num_iter_ = NUM_BENCHMARK_ITERATION
      [+]     num_warmup_iter_ = 10
      [+]     list_batch_time_ = []
      [+]     for i_ in range(num_iter_):
      [+]         count_iter_ = count_iter_ + 1
      [+]         if count_iter_ > num_warmup_iter_:
      [+]             t1_ = time_nc()
      [+]         try:
      [+]             torch
      [+]             no_grad = torch.no_grad
      [+]         except:
      [+]             from torch import no_grad
      [+]         with no_grad():
    - |-
      [+]         if count_iter_ > num_warmup_iter_:
      [+]             t2_ = time_nc()
      [+]             batch_time_ = t2_ - t1_
      [+]             list_batch_time_.append(batch_time_)
      [+]             total_time_ = total_time_ + batch_time_
      [+]     print("Neural_Coder_Bench_IPS: ", round((num_iter_ - num_warmup_iter_) / total_time_, 3))
      [+]     print("Neural_Coder_Bench_MSPI: ", round(total_time_ / (num_iter_ - num_warmup_iter_) * 1000, 3))
      [+]     list_batch_time_.sort()
      [+]     p50_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.50) - 1] * 1000
      [+]     p90_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.90) - 1] * 1000
      [+]     p99_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.99) - 1] * 1000
      [+]     print("Neural_Coder_Bench_P50: ", round(p50_latency_, 3))
      [+]     print("Neural_Coder_Bench_P90: ", round(p90_latency_, 3))
      [+]     print("Neural_Coder_Bench_P99: ", round(p99_latency_, 3))
      [+]     quit()
      [+] else:
      [+]     INFERENCE_LINE
    - 3
  order:
    - below:
      above:
    - below:
      above:
    - below:
      above:
